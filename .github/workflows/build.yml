# git tag v1.0.0
# git push origin v1.0.0

name: Build and Release WPF EXE

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

env:
  GITHUB_TOKEN: ${{ secrets.TOKEN }}  # общий токен для всех шагов

jobs:
  build-and-release:
    runs-on: windows-latest

    steps:
      # 1. Проверяем токен и доступ к репозиторию
      - name: Validate GITHUB_TOKEN
        shell: pwsh
        run: |
          if (-not $env:GITHUB_TOKEN) {
          Write-Error "TOKEN is missing! Aborting workflow."
          exit 1
          }
          # Проверяем доступ к репозиторию через GitHub API
          $response = Invoke-RestMethod -Method Get -Uri "https://api.github.com/repos/$env:GITHUB_REPOSITORY" -Headers @{Authorization = "token $env:GITHUB_TOKEN"} -ErrorAction SilentlyContinue
          if (-not $response) {
          Write-Error "TOKEN does not have access to the repository!"
          exit 1
          }
          Write-Host "TOKEN is valid."

      # 2. Клонируем репозиторий
      - name: Checkout repo
        uses: actions/checkout@v3

      # 3. Устанавливаем .NET
      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '7.0.x'

      # 4. Восстанавливаем зависимости
      - name: Restore dependencies
        run: dotnet restore

      # 5. Сборка проекта в Release
      - name: Build project
        run: dotnet publish -c Release -o publish

      # 6. Получаем версию из exe
      - name: Get version
        id: get_version
        run: |
          $exePath = "publish/KoishiApp.exe"
          $versionInfo = (Get-Item $exePath).VersionInfo
          echo "VERSION=$($versionInfo.FileVersion)" >> $env:GITHUB_ENV

      # 7. Создаём zip с именем версии
      - name: Package EXE
        run: |
          $zipName = "KoishiApp_v$env:VERSION.zip"
          cd publish
          Compress-Archive -Path "*.exe" -DestinationPath "../$zipName"
          cd ..
          echo "ZIP_PATH=$zipName" >> $env:GITHUB_ENV

      # 8. Создаём релиз с автоматическим описанием
      - name: Create GitHub Release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          body: |
            Релиз версии: ${{ github.ref_name }}
            Сборка exe: ${{ env.VERSION }}
          draft: false
          prerelease: false

      # 9. Загружаем zip как артефакт релиза
      - name: Upload release asset
        uses: softprops/action-gh-release@v1
        with:
          files: ${{ env.ZIP_PATH }}

      - name: Cleanup temporary files
        run: |
          if (Test-Path publish) { Remove-Item -Recurse -Force publish }
          if (Test-Path $env:ZIP_PATH) { Remove-Item -Force $env:ZIP_PATH }